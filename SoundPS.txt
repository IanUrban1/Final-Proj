#version 450 

 
#ifdef GL_ES
precision highp float;
#endif
 
// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4

  
uniform sampler2D uSound    
     
 struct  sViewport 
 { 
  	sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
 }; 
    
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}
      
        
          
 //------------------------------------------------------------
// Music Visualizer:
vec2 musicVis(in vec2 fragCoord, in sViewport vp, float time)
{
    //creating a vec4 to be used as a returner
    vec2 musicVisr;
    
    //splitting the screen into two different sections
    //to generate a fade away/in effect for the visulizer
    //after the song starts/stops
    vp.uv.y *= 0.5;
    vp.uv.x *= 0.5;
    
    //grabbing the song and setting it to a float
    float fft = texture(uSound, vec2(vp.uv.x, vp.uv.y)).x;
    
    //the first "pass" of trippy visuals
    //for the visualizer
    float x = sin(fragCoord.x/vp.uv.y);
    float y = cos(fragCoord.y/vp.uv.x);
    float z = tan(fragCoord.x/vp.uv.y);
    
    //the second  "pass" of trippy viusals
    //for the viusalizer, add a slowed down fft
    //so that these visuals move with the song
    x+=sin(fragCoord.x *sin(vp.uv.y) + (fft * 0.01));
    y+=cos(fragCoord.y *sin(vp.uv.x) + (fft * 0.01));
    z+=tan(fragCoord.x/sin(vp.uv.y)  + (fft * 0.01));
    
    //the third "pass" for the visuals
    //for the visualizer, using mix to 
    //generate a more trippy effect than previously
    x = mix(x,y);
    y = mix(y,x);
    //z = mix(z,y,x);
    
    //the fourth "pass" of visuals 
    //for the visualizer, dividing by fft so that
    //the created visuals move with the music
    x+= sin(fragCoord.x/fft/vp.uv.x);
    y+= sin(fragCoord.y/fft/vp.uv.y);
    z+= sin(fragCoord.x/fft*vp.uv.x);
    
    //the fith and final "pass" of visuals
    //for the visualizer, multiplying by fft so that
    //the created visuals move with the music
    x*= sin(fragCoord.y/fragCoord.x/vp.uv.y *fft);
    y*= sin(fragCoord.x/fragCoord.y/vp.uv.x *fft);
    z*= sin(fragCoord.y/fragCoord.x/vp.uv.y *fft);
    
    //creating a vec3 sounder to store all
    //of the created trippy visuals
    //for the x, y, z coordinates
    vec2 sounder = vec2(x, y);
    
    //casting the vec3 sounder or the local var used
    //to store all the data to the vec4 musicVisr
    //so that all of the visuals my be returned
    musicVisr = sounder;
    
    //returning all of the created music data
	return musicVisr;
}

//------------------------------------------------------------
// Render Function
//renderMusicVisr is used to fully render out
//the music visualizer created above
vec2 mainSound(in sViewport vp, in vec2 fragCoord, float time)
{
	//creating a local vec4 renMusicVisr and
    //setting it to the musicVis function
    //this is done so that we may return all of the generated effects
    //created within musicVis
    vec2 renMusicVisr = musicVis(fragCoord, vp, time); 
    
    //returning the rendered music visualizer
    return renMusicVisr;
}
